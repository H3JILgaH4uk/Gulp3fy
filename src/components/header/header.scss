@use 'sass:map';
@use 'src/styles/utils/forwards' as *;
@use 'src/styles/functions/bezier' as *;
@use 'src/styles/mixins/icon';
@use 'src/styles/mixins/media';

$_main-breakpoint: lg;

// header
$_bg: transparent;
$_height: rem(0);

// menu
$_color: color('gray', 600);

// burger
$_btn-size: rem(44);
$_btn-color: color(dark, 1);
$_item-height: rem(4);
$_menu-direction: ltr;
$_menu-transition-delay: 0.3s;

.header {
	z-index: 10;

	background: $_bg;

	//? Header overlay
	&:before {
		// 	position: fixed;
		// 	top: 0;
		// 	left: 0;
		// 	z-index: 1;

		// 	width: 100%;
		// 	height: $_height;

		// 	background: $_bg;

		// 	content: '';
	}

	&__inner {
		display: flex;
		align-items: center;
		min-height: $_height;

		//? Backdrop
		&:before {
			// 	position: fixed;
			// 	top: 0;
			// 	left: 0;

			// 	width: 100%;
			// 	height: 100%;

			// 	background: $backdrop;
			// 	visibility: hidden;
			// 	opacity: 0;

			// 	transition: opacity 0.3s, visibility 0.3s;

			// 	content: '';
			// }

			// &.--show {
			// 	&:before {
			// 		visibility: visible;
			// 		opacity: 1;
			// 	}
		}
	}

	&__logo {
		z-index: 1;
	}

	&__nav {
		//? ## Burger menu
		@include media.max($_main-breakpoint) {
			// position: fixed;
			// top: 0;
			// @if $_menu-direction == ltr {
			// 	left: -100%;
			// } @else {
			// 	right: -100%;
			// }

			// height: 100%;
			// padding-top: calc($_height + rem(50));
			// overflow-y: auto;

			// background: $_bg;

			// @if $_menu-direction == ltr {
			// 	transition: left $_menu-transition-delay bezier(burger-menu);
			// } @else {
			// 	transition: right $_menu-transition-delay bezier(burger-menu);
			// }

			// &.--show {
			// 	@if $_menu-direction == ltr {
			// 		left: 0;
			// 	} @else {
			// 		right: 0;
			// 	}
			// }
		}
	}

	&__menu {
	}

	& .menu {
		&__list {
			@include media.min($_main-breakpoint) {
				display: flex;
			}
		}

		&__item {
			@include media.min($_main-breakpoint) {
				&:not(:last-child) {
				}
			}
		}

		&__link {
			color: $_color;
			font-size: inherit;

			&.--current {
				color: map.get($states, current);

				pointer-events: none;
			}

			@include media.hover {
				&:hover {
					color: color(accent, 500);
				}
			}
		}
	}
}
}
