//- Arguments:
	text      {string}  - Button text
	mods      {string}  - Mod('s)
	icon      {string}  - Icon name
	link      {string}  - Link
	isControl {boolean} - Set item as control

//- Call:
	+pagination
		+pagination-item({ mods: 'prev', icon: 'arrow-left', link: '#', isControl: true }).--disabled

		ul.pagination__list
			+pagination-item({ text: '1', link: '#' }).--current
			+pagination-item({ text: '2', link: '#' })
			+pagination-item({ text: '3', link: '#' })
			+pagination-item({})
			+pagination-item({ text: '8', link: '#' })
			+pagination-item({ text: '9', link: '#' })
			+pagination-item({ text: '10', link: '#' })

		+pagination-item({ mods: 'next', icon: 'arrow-right', link: '#', isControl: true })

mixin pagination(mods)
	-
		let modsArray = '';

		if (mods) {
			const modsList = mods.split(',');

			for (let i = 0; i < modsList.length; i++) {
				modsArray = `${modsArray} ${modsList[i].trim()}__pagination`;
			}
		}

	nav.pagination(class=modsArray)&attributes(attributes)
		.pagination__inner
			block

mixin pagination-item(data)
	-
		let modsArray = '';

		if (data.mods) {
			const modsList = data.mods.split(',');

			for (let i = 0; i < modsList.length; i++) {
				modsArray = `${modsArray} pagination__btn-${modsList[i].trim()}`;
			}
		}

	//- Is controls
	if data.isControl
		//- Controls type: icon
		if (data.icon && !data.text)
			a(class=modsArray, href=data.link)&attributes(attributes)
				+icon-mono(data.icon)

		//- Controls type: text
		else
			a(class=modsArray, href=data.link)&attributes(attributes)!= data.text

	else
		li.pagination__item
			//- Is dots
			if !data.text
				span.pagination__btn-dots&attributes(attributes) ...

			else
				a.pagination__btn(href=data.link)&attributes(attributes)!= data.text
