// Breakpoints
$break_xs:   320;
$break_sm:   576;
$break_md:   768;
$break_lg:   992;
$break_xl:   1200;
$break_xxl:  1400;
$break_xxxl: 1600;

// Breackpoints map
$breakpoints: (
	xs:   $break_xs,
	sm:   $break_sm,
	md:   $break_md,
	lg:   $break_lg,
	xl:   $break_xl,
	xxl:  $break_xxl,
	xxxl: $break_xxxl,
);

// Max width container map
$containerMaxWidth: (
	sm:    $break_sm - 30,
	md:    $break_md - 30,
	lg:    $break_lg - 40,
	xl:    $break_xl - 60,
	xxl:   $break_xxl - 80,
	xxxl:  $break_xxxl - 80,
	fluid: 100%,
);

// Get max width container map
@function mxw-container($key) {
	@if map-has-key($containerMaxWidth, $key) {
		@return map-get($containerMaxWidth, $key);
	}

	@warn 'Size `#{$key}` not found in $containerMaxWidt map.';
	@return null;
}


// Media queries mixins
@mixin media-min($key) {
	$breakpoint: map-get($breakpoints, $key);

	@media (min-width: em($breakpoint)) {
		@content;
	}
}

@mixin media-max($key) {
	$breakpoint: map-get($breakpoints, $key);

	@media (max-width: em($breakpoint)) {
		@content;
	}
}

// Adaptive mixin
$maxWidth: 1920;
$mxwContainer: mxw-container(xxl);
$mxwContainerEm: em(1400 - 80);

@mixin adaptive($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;

	@if $type == 1 {
		#{$property}: rem($startSize);

		@media (max-width: #{$mxwContainerEm}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$mxwContainer - 320}));
		}
	} @else if $type == 2 {
		#{$property}: rem($startSize);

		@media (min-width: #{$mxwContainerEm}) {
			#{$property}: calc(
				#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
			);
		}
	} @else {
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}
