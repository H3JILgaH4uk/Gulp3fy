// Breakpoints
$bp_xs:   320;
$bp_sm:   576;
$bp_md:   768;
$bp_lg:   992;
$bp_xl:   1200;
$bp_xxl:  1400;

// Breackpoints map
$breakpoints: (
	xs:   $bp_xs - 0.2,
	sm:   $bp_sm - 0.2,
	md:   $bp_md - 0.2,
	lg:   $bp_lg - 0.2,
	xl:   $bp_xl - 0.2,
	xxl:  $bp_xxl - 0.2,
);

// Max width container map
$containerWidth: (
	xs:  100%,
	sm:  $bp_sm - 46,
	md:  $bp_md - 46,
	lg:  $bp_lg - 52,
	xl:  $bp_xl - 56,
	xxl: $bp_xxl - 76,
);

$fields: 0 rem(10);

// Get max width container map
@function container($key) {
	@if map-has-key($containerWidth, $key) {
		@return map-get($containerWidth, $key);
	}

	@warn 'Size `#{$key}` not found in $containerWidth map.';
	@return null;
}

// Media queries mixins
@mixin media-min($key) {
	$breakpoint: map-get($breakpoints, $key);

	@media (min-width: em($breakpoint)) {
		@content;
	}
}

@mixin media-max($key) {
	$breakpoint: map-get($breakpoints, $key);

	@media (max-width: em($breakpoint)) {
		@content;
	}
}

@mixin media-minmax($key1, $key2) {
	$breakpointMin: map-get($breakpoints, $key1);
	$breakpointMax: map-get($breakpoints, $key2);

	@media (min-width: em($breakpointMin)) and (max-width: em($breakpointMax)) {
		@content;
	}
}

@mixin media-hover {
	@media (any-hover: hover) {
		@content;
	}
}

// Adaptive mixin
$maxWidth: 1920;
$mxwContainer: container(xxl);

@mixin adaptive($property, $maxValue, $minValue, $mode) {
	$addSize: $maxValue - $minValue;

	// Max width
	@if $mode == 1 {
		#{$property}: rem($maxValue);

		@media (max-width: #{em($mxwContainer)}) {
			#{$property}: calc(#{$minValue + px} + #{$addSize} * ((100vw - 320px) / #{$mxwContainer - 320}));
		}

		// Min width
	} @else if $mode == 2 {
		#{$property}: rem($maxValue);

		@media (min-width: #{em($mxwContainer)}) {
			#{$property}: calc(
				#{$minValue + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
			);
		}

		// Always
	} @else {
		#{$property}: calc(#{$minValue + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}
